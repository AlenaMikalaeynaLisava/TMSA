// #### Task 1 üíª
// - –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ 
// (—Å–ª–æ–∂–µ–Ω–∏–µ, –≤—ã—á–∏—Ç–∞–Ω–∏–µ, —É–º–Ω–æ–∂–µ–Ω–∏–µ, –¥–µ–ª–µ–Ω–∏–µ, –∏ –µ—â–µ –ª—é–±–æ–π/–ª—é–±—ã–µ –Ω–∞ –≤—ã–±–æ—Ä) –∏ 
// –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: 2 —Ü–∏—Ñ—Ä—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏—è
// - –ù–∞–ø–∏—Å–∞—Ç—å 10 –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ (–º–µ—Ç–æ–¥–æ–≤) –ø–æ 
// –≤—ã–∑–æ–≤—É –¥–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ 
// —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–≤–æ–¥–∏—Ç –ª–∏–±–æ: —á—Ç–æ "—Ç–µ—Å—Ç" –ø—Ä–æ—à–µ–ª, –ª–∏–±–æ —á—Ç–æ "—Ç–µ—Å—Ç" —Å–≤–∞–ª–∏–ª—Å—è


class Calc {
    sum(num1: number, num2: number) {
        return num1+num2
    }
    subtrac(num1: number, num2: number) {
        return num1-num2
    }
    multiply(num1: number, num2: number) {
        return num1*num2
    }
    divide(num1: number, num2: number) {
        return num1/num2
    }
    pow(num1: number, num2: number) {
        return  Math.pow(num1, num2)
    }
   
}


function sumUnit(arg1: any, arg2: any, expectedResult: any) {
    const result = new Calc().sum(arg1, arg2);
    if(result === expectedResult) console.log(`Test sum ${arg1}, ${arg2}, ${expectedResult} success`);
    else throw new Error(`Test sum ${arg1}, ${arg2}, ${expectedResult} failed`)
}
function subtracUnit(arg1: any, arg2: any, expectedResult: any) {
    const result = new Calc().subtrac(arg1, arg2);
    if(result === expectedResult) console.log(`Test subtrac ${arg1}, ${arg2}, ${expectedResult} success`);
    else throw new Error(`Test subtrac ${arg1}, ${arg2}, ${expectedResult} failed`)
}
function multiplyUnit(arg1: any, arg2: any, expectedResult: any) {
    const result = new Calc().multiply(arg1, arg2);
    if(result === expectedResult) console.log(`Test multiply ${arg1}, ${arg2}, ${expectedResult} success`);
    else throw new Error(`Test multiply ${arg1}, ${arg2}, ${expectedResult} failed`)
}

function divideUnit(arg1: any, arg2: any, expectedResult: any) {
    const result = new Calc().divide(arg1, arg2);
    if(result === expectedResult) console.log(`Test divide ${arg1}, ${arg2}, ${expectedResult} success`);
    else throw new Error(`Test divide ${arg1}, ${arg2}, ${expectedResult} failed`)
}

function powUnit(arg1: any, arg2: any, expectedResult: any) {
    const result = new Calc().pow(arg1, arg2);
    if(result === expectedResult) console.log(`Test pow ${arg1}, ${arg2}, ${expectedResult} success`);
    else throw new Error(`Test pow ${arg1}, ${arg2}, ${expectedResult} failed`)
}

try {
    sumUnit(5, 7, 12);
  } catch(err) {
    console.log(err)
  }
  
  try {
    sumUnit('5', '7', "arguments should be numbers");  
  } catch(err) {
    console.log(err) 
  }

  try {
    sumUnit('6', 7, "arguments should be numbers"); 
  
  } catch(err) {
    console.log(err) 
  }

  try {
    subtracUnit(-5, 7, -12); 
  } catch(err) {
    console.log(err)
  }
  
  try {
    subtracUnit('5', '-7', "arguments should be numbers");   
  } catch(err) { 
    console.log(err)  
  }

  try {
    subtracUnit('6', false, "arguments should be numbers");  
  } catch(err) { 
    console.log(err)  
  }
 
  try {
    multiplyUnit('5', '-7', '35');   
  } catch(err) {  
    console.log(err)  
  }

  try {
    multiplyUnit('6', NaN, 'arguments should be numbers');  
  } catch(err) {  
    console.log(err)  
  }

  try {
    divideUnit(35, 7, 5);   
  } catch(err) {      
    console.log(err)  
  }

  try {
    divideUnit(false, 5, 'arguments should be numbers');   
  } catch(err) { 
    console.log(err) 
  }

  try {
    powUnit(3, 1, 3);   
  } catch(err) { 
    console.log(err) 
  }

  try {
    powUnit(3, "1", 'arguments should be numbers');   
  } catch(err) { 
    console.log(err) 
  }





