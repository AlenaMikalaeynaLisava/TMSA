// #### Task 3 üíª
// –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É (`str`) –∏ —á–∏—Å–ª–æ (`classNum`)
// (—á–∏—Å–ª–æ –≤—Å–µ–≥–¥–∞ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ)
// –Ω–∞–ø–∏—Å–∞—Ç—å –≥–µ—Ç—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –≤ —Å—Ç—Ä–æ–∫–µ
// –∏ –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - —á–∏—Å–ª–æ (`paramNum`).
// (—á–∏—Å–ª–æ —Ç–∞–∫–∂–µ –≤—Å–µ–≥–¥–∞ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ)
// –µ—Å–ª–∏ —á–∏—Å–ª–æ –µ—Å—Ç—å, —Ç–æ `num = classNum - paramNum`, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ `num = classNum`
// —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç `str`, –≤ –∫–æ—Ç–æ—Ä–æ–π —á–∞—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç–∞
// –µ—Å–ª–∏ `num < 0`, —Ç–æ –ø–µ—Ä–≤—ã–µ `num` —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å–ª–∏ `num > 0`, —Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ `num` —Å–∏–º–≤–æ–ª–æ–≤
// –Ω–∞–ø—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∞ 
// `str = '—ç—Ç–æ —Å—Ç—Ä–æ–∫–∞', num = 2, result = '—Ç—ç–æ —Å—Ç—Ä–æ–∫–∞'`
// `num = -2, result = '—ç—Ç–æ —Å—Ç—Ä–æ–∞–∫'`
// `num = 10, result = '–∞–∫–æ—Ä—Ç—Å –æ—Ç—ç'`



const stri:string = "—ç—Ç–æ —Å—Ç—Ä–æ–∫–∞";

class Some{
    str:string;
    classNum:number;
    paramNum?: number;
    
    constructor(str:string, _classNum:number, paramNum?:number){
        this.str = str;
        this.classNum = _classNum;
        if(paramNum){
            this.paramNum = this.str.length<paramNum?this.str.length:paramNum;
        }
    }

    set setClassNum(_classNum:number){
        _classNum = this.str.length<_classNum?this.str.length:_classNum;
    };

      // toUpperCase –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∞, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π
    get getSymb(){
        let max=0;
        let maxSymb = '';
        const countSymb = (str:string)=>{
            const arr = str.split("");
            const result = arr.filter(item => item!== arr[0]);
             if(arr.length -result.length>max){
                 max = arr.length -result.length;
                 maxSymb = str[0];
             }
            if(result.length>1){
                const newStr = result.join("");
                countSymb(newStr);
            }
        }
        countSymb(this.str);
        return maxSymb
    };
    meth(paramNum?:number){
        const num = paramNum?this.classNum - paramNum:this.classNum;
        if(num<0){
            const changeStr =  this.str.slice(0, num);
            const notchangeStr = this.str.slice(num);
            const changed = changeStr.split("").reverse().join("");
            return changed.concat(notchangeStr);
        } 
            const notchangeStr =  this.str.slice(0, num);
            const changeStr = this.str.slice(num);
            const changed = changeStr.split("").reverse().join("");
            return notchangeStr.concat(changed);
        
    }
}

const some = new Some("—ç—Ç–æ —Å—Ç—Ä–æ–∫–∞", 5, 20);
console.log(some.getSymb);
console.log(some.meth(some.paramNum));