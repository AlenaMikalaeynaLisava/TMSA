// #### Task 1 üíª
// –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∞—Å—Å, –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Å—Ç—Ä–æ–∫—É (`str`), —á–∏—Å–ª–æ (`symNum`) –∏ —Å–∏–º–≤–æ–ª (`sym`)
// —Å–æ–∑–¥–∞—Ç—å –≥–µ—Ç—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—Å—Ç—å –ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ `sym`
// –≥–µ—Ç—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–∏–º–≤–æ–ª `symNum` –≤ —Å—Ç—Ä–æ–∫–µ `str`. 
// –ï—Å–ª–∏ `symNum` –±–æ–ª—å—à–µ, —á–µ–º —Å–∏–º–≤–æ–ª–æ–≤ –≤ `str`, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å–∏–º–≤–æ–ª
// –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é Map —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏, 
// –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É `str`, –≥–¥–µ –∑–∞–º–µ–Ω–µ–Ω–µ–Ω–∞ –∫–∞–∂–¥–∞—è 0 –ø–æ–¥—Å—Ç—Ä–æ–∫–∞ –∏–∑ Map –Ω–∞ 1
// –ø—Ä–∏–º–µ—Ä: `str = '123qweasd12', Map([['12', '-'], ['ea', '*']]), result = '-3qw*sd-'`
// –≤—ã–≤–µ—Å—Ç–∏ –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã –∏ –ø–æ–ª–µ `str`

class Strings {
    str:string;
    symNum:number;
    sym:string;

    constructor(str:string, symNum:number, sym:string){
        this.str = str;
        this.symNum = symNum;
        this.sym = sym;
    }

    get isSym(){
        return this.str.includes(this.sym)
    }

    get getSymNum(){
        const randomIndex = Math.floor(Math.random()*(this.str.length-1));
        const sym = this.str[this.symNum];
        if(sym) return sym
        else return randomIndex 
    }

    returnStr(map:Map<string,string>):string{
        let newStr = this.str;
        for (let entry of map) {
            const value = entry[1];
            const regexp = new RegExp(entry[0], "\g");
            newStr = newStr.replace(regexp, value)
          }
        return newStr
    }
}

const newStrings = new Strings("This is a 156 string445", 45, "5");

const map = new Map([["is","-"],["15","er"]]);
console.log(newStrings.isSym);
console.log(newStrings.getSymNum);
console.log(newStrings.returnStr(map));
