import {Car, FuelCost,brandEquipment} from "./car.js"
import {Bills} from "./bills.js"
import *  as fs from 'fs';



const bill = new Map([
    ["fuel", 500],
    ["flat", 350],
    ["rent", 50],
    ["tax", 1]
  ]);

  const newBill = new Bills(bill);
  console.log(Bills.getBill("fuel"));
// #### Task 4 üíª
// –í –¥–æ—á–µ—Ä–Ω–µ–º –∫–ª–∞—Å—Å–µ (–º–æ–∂–Ω–æ –≤ 1, –º–æ–∂–Ω–æ –≤ –æ–±–æ–∏—Ö) —Å–æ–∑–¥–∞—Ç—å –º–µ—Ç–æ–¥ buy —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Ç–∏–ø–∞ –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏.
// –ú–µ—Ç–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –≤ 3 –∑–∞–¥–∞–Ω–∏–∏ –º–µ—Ç–æ–¥ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—É–º–º—É –∫ —Å—á–µ—Ç–∞–º –≤ –∑–∞–¥–∞–Ω–∏–∏ 2.
// –í –∫–ª–∞—Å—Å–µ Bills –¥–æ–±–∞–≤–∏—Ç—å —É—Å–ª–æ–≤–∏–µ, —á—Ç–æ, –µ—Å–ª–∏ —Å—É–º–º–∞ —Å—á–µ—Ç–æ–≤ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä 50000), 
// —Ç–æ –Ω–∞ `–∑–Ω–∞—á–µ–Ω–∏–µ = —Å—É–º–º–∞ —Å—á–µ—Ç–æ–≤ - –ø–æ—Ä–æ–≥` –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å—á—ë—Ç–æ–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è –Ω–∞–ª–æ–≥ (–Ω–∞–ª–æ–≥ –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –Ω–∞ –Ω–∞–ª–æ–≥) 

class NewCar1 extends Car{
    private readonly carBrand:string="Audi";
    fuelType:string;
    fuelAmount?:number;
   constructor(public tankCapacity: number, public fuelConsumption: number, public fuelReserve: number, fuelType:string, fuelAmount?:number ){ 
       super();
       this.fuelType = fuelType;
       if(fuelAmount){
           this.fuelAmount = fuelAmount;
       }
   }
    
   drive(dist:number): void{
       let left = this.fuelReserve - this.fuelConsumption*dist/100;
       while (left<0){
           this.refuel();
           left = this.fuelReserve - this.fuelConsumption*dist/100;
       }
      
   };
   refuel(){
    const type = this.fuelType;
    if(this.fuelAmount){
        const petrolSum = FuelCost[type]*this.fuelAmount;
        console.log(petrolSum)
        this.fuelReserve=this.fuelReserve+this.fuelAmount;
    } else {
        const petrolSum = FuelCost[type]*(this.tankCapacity-this.fuelReserve);
        console.log(petrolSum)
        this.fuelReserve=this.tankCapacity;
    }       
   };
   getCost():string{
    const brand = this.carBrand;
    const file = (brand==="BMW")?"hw12/bmw.txt": "hw12/audi.txt";
    const complectation = brandEquipment[brand];
    const fileContent = fs.readFileSync(file, "utf8");
    if(!fileContent.includes(complectation))
    console.log("–¥–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ –Ω–µ—Ç –≤ –ø—Ä–æ–¥–∞–∂–µ")
    else  console.log(fileContent)
    return fileContent;
   }
   buy(complectationType){
    const result = this.getCost();
     if(result.includes(complectationType)){
        const arr = result.split("\r\n");
        const res = arr.find(el => el.includes(complectationType));
        const result1 = +res.match(/\d+/)[0];
        Bills.addBill("autoCost",result1);
        const sum = Bills.sumBill();
        return sum;
     }
   }
}

const second = new NewCar1(65, 6.5,20, "Gasoline");
second.buy("comfort");
console.log(Bills.getBill("autoCost"));
